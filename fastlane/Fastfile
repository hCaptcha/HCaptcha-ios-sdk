fastlane_version "2.196"

default_platform :ios

max_pod_size_kb = 150

platform :ios do
  skip_docs

  devices = ["iPhone X (~> 12)"]
  # devices << "iPhone X (~> 11)" if !Helper.is_ci?
  # devices << "iPhone 7 (~> 10)" if !Helper.is_ci?
  # devices << "iPhone 6s (~> 9)" if !Helper.is_ci?

  desc "Runs the following lanes:\n- test\n- pod_lint\n- carthage_lint"
  lane :ci do
    test
    html_lint
    pod_lint
    carthage_lint
    spm_build
    pod_size
  end

  desc "Runs all the tests"
  lane :test do
    cocoapods(
      podfile: "Example/Podfile",
      try_repo_update_on_error: true,
    )

    swiftlint(
      executable: "Example/Pods/Swiftlint/swiftlint",
      strict: true,
      reporter: "emoji",
    )

    # The problem lies in the fact (or rather: serious bug in xcodebuild) that
    # the timeout for connecting to the XCTest server starts at the moment you
    # issue the command xcodebuild. The timeout is 120 seconds, so if your
    # compilation + startup of the simulator takes longer than 2 minutes
    # xcodebuild will give this "Canceling tests due to timeout" error.
    # https://stackoverflow.com/questions/37922146/xctests-failing-on-physical-device-canceling-tests-due-to-timeout/40790171#40790171
    scan(
      build_for_testing: true,
      devices: self.select_similar_simulator(devices),
      scheme: "HCaptcha-Example",
      workspace: "Example/HCaptcha.xcworkspace",
      code_coverage: true,
    )

    scan(
      test_without_building: true,
      devices: self.select_similar_simulator(devices),
      scheme: "HCaptcha-Example",
      workspace: "Example/HCaptcha.xcworkspace",
      code_coverage: true,
    )

    #codecov(
    #  project_name: 'HCaptcha',
    #  use_xcodeplist: true,
    #)

    unless Helper.is_ci?
      puts "Running UI Tests"
      scan(
        test_without_building: true,
        devices: self.select_similar_simulator(devices),
        scheme: "HCaptcha_UITests",
        workspace: "Example/HCaptcha.xcworkspace",
        code_coverage: true,
      )

      puts "Not CI: Skipping coverage files upload"
    end
  end

  desc "Lint Cocoapods Lib"
  lane :pod_lint do
    pod_lib_lint(allow_warnings: false)
  end

  desc "Lint Carthage lib"
  lane :carthage_lint do
    carthage(
      executable: "./carthage.sh",
      platform: "iOS",
      cache_builds: true,
      use_binaries: false,
      no_skip_current: false,
      use_xcframeworks: true
    )

    carthage(
      executable: "./carthage.sh",
      command: "build",
      # archive: true, use_xcframeworks not supported https://github.com/Carthage/Carthage/releases/tag/0.38.0
      platform: "iOS",
      cache_builds: true,
      no_skip_current: true,
      use_xcframeworks: true
    )
  end

  desc "Build Swift Package"
  lane :spm_build do
    # swift build doesn't support iOS build out of the box
    # https://github.com/fastlane/fastlane/discussions/17362
    swiftc = [
      '-sdk',
      `xcrun --sdk iphonesimulator --show-sdk-path`.strip,
      '-target',
      'x86_64-apple-ios9.0-simulator'
    ].map { |o| " -Xswiftc \"#{o}\"" }
    sh("swift build #{swiftc.join}")
  end

  desc "Validate html template"
  lane :html_lint do
    unless system("git diff --exit-code --output=/dev/null ../HCaptcha/Classes/HCaptchaHtml.swift")
      UI.user_error!(
        "HCaptcha/Assets/hcaptcha.html looks different from HCaptcha/Classes/HCaptchaHtml.swift!" \
        "\n    Run 'bundle exec fastlane ios html2swift' to update HCaptchaHtml.swift and commit"
      )
    end

    html = File.read("../HCaptcha/Assets/hcaptcha.html")
      .gsub("${endpoint}", "")
      .gsub("${theme}", "{}")
      .gsub("${rqdata}", "")
      .gsub("${size}", "invisible")
      .gsub("${apiKey}", "api-key")
    Tempfile.open("hcaptcha.html") do |html_file|
      html_file.write html
      html_file.close

      yarn(
        command: "lint #{html_file.path}",
        package_path: "package.json",
        auto_install_dependencies: true
      )
    end
  end

  desc "Cocoapods size check"
  lane :pod_size do
    cocoapods_size_repo = Pathname.new "../.lint/cocoapods-size"
    unless cocoapods_size_repo.exist?
      cocoapods_size_repo.parent.mkpath
      sh("git clone https://github.com/google/cocoapods-size #{cocoapods_size_repo}")
    end

    Dir.chdir(cocoapods_size_repo) do
      config_json = "source_config.json"
      File.write(config_json, {
                                pods:[
                                  {
                                    sdk: "HCaptcha",
                                    path: Pathname.getwd.parent.parent
                                  }
                                ]
                              }.to_json)
      output_json = "result.json"

      sh ["./measure_cocoapod_size.py",
          "--cocoapods HCaptcha",
          "--cocoapods_source_config #{config_json}",
          "--mode swift",
          "--json #{output_json}"].join(" ")

      output = JSON.parse(File.read(output_json))

      pod_size_kb = output["combined_pods_extra_size"].to_int / 1024

      UI.user_error!("HCaptcha pod size size exceeded! #{pod_size_kb}KB > #{max_pod_size_kb}KB") if pod_size_kb > max_pod_size_kb

      puts("HCaptcha pod size is #{pod_size_kb}KB")
    end
  end

  desc "Generate HCaptchaHtml.swift"
  lane :html2swift do
    File.write("../HCaptcha/Classes/HCaptchaHtml.swift",
      <<~SWIFT
        //
        //  HCaptchaHtml.swift (Autogenerated)
        //  HCaptcha
        //
        //  Copyright Â© #{Date.today.year} HCaptcha. All rights reserved.
        //

        import Foundation

        public struct HCaptchaHtml {
            public static let template = """
        #{indent(File.read('../HCaptcha/Assets/hcaptcha.html'), 8)}
            """
        }
      SWIFT
    )
  end

  desc "Build samples"
  lane :samples_build do
    ["HCaptcha-Example",
     "HCaptcha-Objc-Example",
     "HCaptcha-SwiftUI-Example"].each do |scheme|
      gym(
        workspace: "Example/HCaptcha.xcworkspace",
        scheme: scheme,
        configuration: "Debug",
        skip_archive: true,
        skip_package_ipa: true,
        skip_codesigning: true,
        destination: "generic/platform=iOS"
      )
    end
  end

  desc "Deploy a new version to Github and Cocoapods"
  lane :release do
    # Checking files
    tag = last_git_tag

    changelog_contents = File.read '../CHANGELOG.md'
    if !changelog_contents.include? tag
      UI.user_error! "CHANGELOG hasn't been updated"
    end

    if version_get_podspec != tag
      UI.user_error! "Podspec version different than tag name"
    end

    pod_push(
      path: "HCaptcha.podspec",
      verbose: true,
    )

    prev_tag = sh "git describe --abbrev=0 --tags `git rev-list --tags --skip=1  --max-count=1`"
    changelog = changelog_from_git_commits(
      between: [tag, prev_tag.strip],
      pretty: "- %s"
    )

    set_github_release(
      repository_name: "hCaptcha/HCaptcha-ios-sdk",
      api_bearer: ENV["GITHUB_TOKEN"],
      tag_name: tag,
      name: tag,
      description: changelog,
    )
  end

  # Private

  def select_similar_simulator(args)
    args.map { |device_string|
      pieces = device_string.split(' (')
      FastlaneCore::Simulator.all
        .select { |s| s.name == pieces.first }
        .sort_by { |s| Gem::Version.create(s.os_version) }
        .detect { |s| Gem::Requirement.new(pieces[1].tr('()', '')).satisfied_by?(Gem::Version.create(s.os_version)) }
    }
    .compact
    .map { |s| "#{s.name} (#{s.ios_version})"}
  end

  def indent(str, spaces)
    str.split("\n").map { |l| l.empty? ? "" : "#{' ' * spaces}#{l}" }.join("\n")
  end
end